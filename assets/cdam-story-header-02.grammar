<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.8">
    <grammar name="CDAM Story Header 2" start="id:58" author="Jerry Belich" email="jerry@choosatron.com" fileextension="cdam" uti="com.choosatron" complete="yes">
        <description>Story Header</description>
        <scripts>
            <script name="TextBody" type="DataType" id="64">
                <source language="Python"># Text Body - Used for passage body text and choice text.

def parseByteRange(element, byteView, bitPos, bitLength, results):
    # this method parses data starting at bitPos, bitLength bits are remaining
    &quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;
    logMessageHighlight(&quot;TESTING&quot;)
    textStr = &quot;&quot;
    # how many bytes were processed?
    processedBytes = 0
    iteration = 0
    # we are only working with bytes
    startPos = bytePos = bitPos / 8
    
    processedBytes = 0
    byteLength = bitLength / 8
    logMessageHighlight(&quot;TESTING&quot;)
    result = results.addStructureStart(element.getEnclosingStructure(), 0, &quot;TextBody&quot;)
    #structure = result.getStructure()    
    #structure.setLength('5', LENGTH_UNIT_BYTES)

    while (bytePos - startPos) &lt; byteLength:
        byteRead = byteView.readByte(bytePos)
        bytePos += 1
        processedBytes += 1
        if byteRead == 0x1A or byteRead == 0x05 or (bytePos - startPos) == byteLength:
            print(&quot;End of Text&quot;)
            if len(textStr) &gt; 0:
                if (bytePos - startPos) == byteLength:
                    textStr += chr(byteRead)
                    processedBytes += 1
                textValue = StringValue()
                textValue.setString(textStr)
                textElement = StringElement(1, &quot;Text&quot;, True)
                #textElement.setLength(LENGTH_UNIT_BYTES, len(textStr))
                textStr = &quot;&quot;
                print(&quot;Text Len: &quot; + str(textElement.getLength()))
                results.addElement(textElement, processedBytes - 1, iteration, textValue)
                # The currently read byte is part of a SUB or CMD
                processedBytes = 1

        # SUB or Substitute byte means a word lookup, 3 byte address
        if byteRead == 0x1A:
            print(&quot;Starting SUB&quot;)
            subByteElement = Element(1, &quot;Start Substitute&quot;, True)
            subValue = StringValue()
            subValue.setString(&quot;SUB: 1A&quot;)
            results.addElement(subByteElement, 1, iteration, subValue)
            address = byteView.readUnsignedInt(bytePos, 3, ENDIAN_BIG)
            addressVal = NumberValue()
            addressVal.setName(&quot;Lookup Address&quot;)
            addressVal.setUnsigned(address)
            bytePos += 3
            subElement = Element(2, &quot;Substitution&quot;, True)
            results.addElement(subElement, 3, iteration, addressVal)
            processedBytes = 0
        elif byteRead == 0x05:
            print(&quot;Starting CMD&quot;)
            cmdStartElement = StringElement(ELEMENT_STRING, &quot;Start Command&quot;, True)
            cmdStartValue = StringValue()
            cmdStartValue.setString(&quot;ENQ: 05&quot;)
            results.addElement(cmdStartElement, 1, iteration, cmdStartValue)
            commandType = byteView.readByte(bytePos)
            bytePos += 1
            cmdTypeElement = NumberElement(ELEMENT_NUMBER, &quot;Command Type&quot;, True)
            cmdTypeValue = NumberValue()
            cmdTypeValue.setUnsigned(commandType)
            results.addElement(cmdTypeElement, 1, iteration, cmdTypeValue)
            cmdBody = &quot;&quot;
            processedBytes = 0
            while byteRead != 0x06:
                byteRead = byteView.readByte(bytePos)
                if byteRead != 0x06:
                    bytePos += 1
                    processedBytes += 1
                    cmdBody += chr(byteRead)
            if len(cmdBody) &gt; 0:
                commandVal = StringValue()
                commandVal.setName(&quot;Command Body&quot;)
                commandVal.setString(cmdBody)
                cmdElement = StringElement(ELEMENT_STRING, &quot;Command&quot;, True)
                results.addElement(cmdElement, processedBytes, iteration, commandVal)
            bytePos += 1
            cmdEndElement = Element(1, &quot;End Command&quot;, True)
            cmdEndValue = StringValue()
            cmdEndValue.setString(&quot;ACK: 06&quot;)
            results.addElement(cmdEndElement, 1, iteration, cmdEndValue)
            processedBytes = 0
        else:
            textStr += chr(byteRead)

    results.addStructureEnd(bytePos - startPos)
    print(str(bytePos - startPos))
    return bytePos - startPos


def fillByteRange(value, byteArray, bitPos, bitLength):
    # this method translates edited values back to the file
    &quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;</source>
            </script>
        </scripts>
        <structure name="StoryHeader" id="58" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <binary name="StartHeader" mustmatch="yes" id="59" fillcolor="BA1A00" length="1">
                <description>Start of Heading byte.</description>
                <fixedvalues>
                    <fixedvalue name="SOH" value="01"/>
                </fixedvalues>
            </binary>
            <structure name="BinaryVersion" id="60" length="3">
                <number name="Major" id="61" fillcolor="E7D3FF" type="integer" length="1"/>
                <number name="Minor" id="62" fillcolor="E6D2FF" type="integer" length="1"/>
                <number name="Revision" id="63" fillcolor="EFCFFF" type="integer" length="1"/>
            </structure>
            <structure name="Flags" id="65" length="4">
                <number name="Features Used" id="66" fillcolor="BEFBA9" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000" maxval="0111111111111111111111111111111111111111111111111111111111111111">
                    <mask name="Scripting" value="0x80">
                        <fixedvalue name="Yes" value="0x80"/>
                        <fixedvalue name="No" value="0x0"/>
                    </mask>
                    <mask name="Variables" value="0x40">
                        <fixedvalue name="Yes" value="0x40"/>
                        <fixedvalue name="No" value="0x0"/>
                    </mask>
                    <mask name="Images" value="0x20">
                        <fixedvalue name="Yes" value="0x20"/>
                        <fixedvalue name="No" value="0x0"/>
                    </mask>
                </number>
                <number name="Toggles" id="67" fillcolor="BFFBA9" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000">
                    <mask name="Continue" value="0x80">
                        <fixedvalue name="Yes" value="0x80"/>
                        <fixedvalue name="No" value="0x0"/>
                    </mask>
                    <mask name="Multiplayer" value="0x40">
                        <fixedvalue name="Yes" value="0x40"/>
                        <fixedvalue name="No" value="0x0"/>
                    </mask>
                    <mask name="Hide Used" value="0x20">
                        <fixedvalue name="Yes" value="0x20"/>
                        <fixedvalue name="No" value="0x0"/>
                    </mask>
                </number>
                <number name="Flags3" id="68" fillcolor="BDFBA7" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000" maxval="11111111"/>
                <number name="Flags4" id="69" fillcolor="C1FBA9" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000" maxval="11111111"/>
            </structure>
            <structure name="Variables" id="71" length="4">
                <number name="Bits" id="106" fillcolor="FFED78" type="integer" length="1"/>
                <number name="Small" id="73" fillcolor="FFEFA6" type="integer" length="1" minval="0" maxval="255">
                    <description>The number of small variables to allocate space for (8 bit).</description>
                </number>
                <number name="Big" id="74" fillcolor="FFF67D" type="integer" length="1" minval="0" maxval="255">
                    <description>The number of big variables to allocate space for (16 bit).</description>
                </number>
                <number name="Rsvd" id="108" type="integer" length="1"/>
            </structure>
            <number name="StorySize" id="76" fillcolor="B764FF" type="integer" length="4" minval="1" maxval="1572864">
                <description>The story size in bytes.</description>
            </number>
            <structure name="StoryVersion" id="77" length="3" fillcolor="F9DCFF">
                <number name="Major" id="78" fillcolor="E0C6FF" type="integer" length="1"/>
                <number name="Minor" id="79" fillcolor="E4D1FF" type="integer" length="1"/>
                <number name="Revision" id="80" fillcolor="DCCFFF" type="integer" length="1"/>
            </structure>
            <number name="Rsvd" id="109" type="integer" length="1"/>
            <string name="LanguageCode" id="82" fillcolor="FFB85D" type="fixed-length" length="4"/>
            <string name="Title" id="83" fillcolor="FFBA68" type="fixed-length" length="64"/>
            <string name="Subtitle" id="84" fillcolor="FFB24F" type="fixed-length" length="32"/>
            <string name="Author" id="85" fillcolor="FFBA64" type="fixed-length" length="48"/>
            <string name="Credits" id="86" fillcolor="FFB961" type="fixed-length" length="80"/>
            <string name="Contact" id="87" fillcolor="FFB962" type="fixed-length" length="128"/>
            <number name="PublishDate" id="100" type="integer" length="4"/>
        </structure>
    </grammar>
</ufwb>
