<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.9">
    <grammar name="Choosatron Story Binary" start="id:322" author="Jerry Belich" email="jerry@choosatron.com" fileextension="cdam" uti="com.choosatron" complete="yes">
        <description>Grammar for the Choosatron Deluxe Adventure Matrix binary story file.</description>
        <scripts>
            <script name="Passage" type="Grammar" id="66">
                <source language="Python">def init():
	print &quot;init&quot;

def processGrammar(grammar):
	print &quot;grammar&quot;

def terminate():
	print &quot;terminate&quot;
</source>
            </script>
            <script name="TextBody" type="DataType" id="64">
                <source language="Python"># Text Body - Used for passage body text and choice text.

def parseByteRange(element, byteView, bitPos, bitLength, results):
    # this method parses data starting at bitPos, bitLength bits are remaining
    &quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

    textStr = &quot;&quot;
    # how many bytes were processed?
    processedBytes = 0
    iteration = 0
    # we are only working with bytes
    startPos = bytePos = bitPos / 8
    
    processedBytes = 0
    byteLength = bitLength / 8
    
    textResult = results.getLastResult()
    if textResult is not None:
        countPos = textResult.getStartBytePos()
        textCount = textResult.getByteView().readUnsignedInt(countPos, 2, ENDIAN_LITTLE)
        if textCount == 0:
            return 0

    bodyResult = results.addStructureStart(element.getEnclosingStructure(), startPos, 0, &quot;Body&quot;, True)

    while (bytePos - startPos) &lt; byteLength:
        byteRead = byteView.readByte(bytePos)
        #print(&quot;Byte: &quot; + chr(byteRead))
        bytePos += 1
        processedBytes += 1
        #print &quot;Position: &quot; + str(bytePos - startPos) + &quot;, Total Length: &quot; + str(byteLength)
        if byteRead == 0x1A or byteRead == 0x05 or (bytePos - startPos) == byteLength:
            if len(textStr) &gt; 0:
                if (bytePos - startPos) == byteLength:
                    textStr += chr(byteRead)
                    processedBytes += 1
                textValue = StringValue()
                textValue.setString(textStr)
                print(textStr)
                textStr = &quot;&quot;
                textElement = Element(1, &quot;Text&quot;, True)
                results.addElement(textElement, processedBytes - 1, iteration, textValue)
                # The currently read byte is part of a SUB or CMD
                processedBytes = 1
                if (bytePos - startPos) == byteLength:
                    print(&quot;End of Text&quot;)
                    bodyResult = results.addStructureEnd(bytePos)

        # SUB or Substitute byte means a word lookup, 3 byte address
        if byteRead == 0x1A:
            print(&quot;Starting SUB&quot;)
            subByteElement = Element(1, &quot;Start Substitute&quot;, True)
            subValue = StringValue()
            subValue.setString(&quot;SUB: 1A&quot;)
            results.addElement(subByteElement, 1, iteration, subValue)
            address = byteView.readUnsignedInt(bytePos, 3, ENDIAN_LITTLE)
            addressVal = NumberValue()
            addressVal.setName(&quot;Lookup Address&quot;)
            addressVal.setUnsigned(address)
            bytePos += 3
            subElement = Element(2, &quot;Substitution&quot;, True)
            results.addElement(subElement, 3, iteration, addressVal)
            processedBytes = 0
        elif byteRead == 0x05:
            print(&quot;Starting CMD&quot;)
            cmdStartElement = Element(1, &quot;Start Command&quot;, True)
            cmdStartValue = StringValue()
            cmdStartValue.setString(&quot;ENQ: 05&quot;)
            results.addElement(cmdStartElement, 1, iteration, cmdStartValue)
            commandType = byteView.readByte(bytePos)
            bytePos += 1
            cmdTypeElement = Element(2, &quot;Command Type&quot;, True)
            cmdTypeValue = NumberValue()
            cmdTypeValue.setUnsigned(commandType)
            results.addElement(cmdTypeElement, 1, iteration, cmdTypeValue)
            cmdBody = &quot;&quot;
            processedBytes = 0
            while byteRead != 0x06:
                byteRead = byteView.readByte(bytePos)
                if byteRead != 0x06:
                    bytePos += 1
                    processedBytes += 1
                    cmdBody += chr(byteRead)
            if len(cmdBody) &gt; 0:
                commandVal = StringValue()
                commandVal.setName(&quot;Command Body&quot;)
                commandVal.setString(cmdBody)
                cmdElement = Element(1, &quot;Command&quot;, True)
                results.addElement(cmdElement, processedBytes, iteration, commandVal)
            bytePos += 1
            cmdEndElement = Element(1, &quot;End Command&quot;, True)
            cmdEndValue = StringValue()
            cmdEndValue.setString(&quot;ACK: 06&quot;)
            results.addElement(cmdEndElement, 1, iteration, cmdEndValue)
            processedBytes = 0
        else:
            textStr += chr(byteRead)

    #if (bytePos - startPos) == length:
    #   results.addStructureEnd(bytePos)
    #   print &quot;Processed Bytez: &quot; + str(bytePos - startPos)
    return bytePos - startPos


def fillByteRange(value, byteArray, bitPos, bitLength):
    # this method translates edited values back to the file
    &quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;</source>
            </script>
            <script name="Ending" type="DataType" id="92">
                <source language="Python"># custom data type script

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	choiceResult = results.getResultByName(&quot;ChoiceCount&quot;)
	countPos = choiceResult.getStartBytePos()
	choiceCount = choiceResult.getByteView().readUnsignedInt(countPos, 1, ENDIAN_LITTLE)

	# how many bytes were processed?
	processedBytes = 0
	iteration = 0
    #startPos = bitPos / 8

	#testByte = 0xAD
	#eq = testByte &amp; 0x07
	#print &quot;Ending Quality Test: &quot; + str(eq)

	if choiceCount == 0:
		#print &quot;This is an ending.&quot;
		#results.addStructureStartAtPosition(element.getEnclosingStructure(), bitPos / 8, 0, &quot;Ending&quot;)
		attributes = byteView.readUnsignedInt(bitPos / 8, 1, ENDIAN_LITTLE)
		endingQuality = attributes &amp; 0x07

		# create and set new value
		value = NumberValue()
		value.setUnsigned(endingQuality)
		value.setName(&quot;Ending Quality&quot;)
		processedBytes = 1
		results.addElement(element, processedBytes, iteration, value)
	else:
		print &quot;Not an ending, choice count: &quot; + str(choiceCount)

	# return number of processed bytes
	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# write an integer back to file
	# byteArray.writeUnsignedIntBits(highWord, bitPos, bitLength, ENDIAN_LITTLE)
</source>
            </script>
            <script name="SmallDefaults" type="DataType" id="330">
                <source language="Python"># custom data type script

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	# how many bytes were processed?
	processedBytes = 0
	iteration = 0
	# we are only working with bytes
	bytePos = bitPos / 8
	#startPos = bytePos
	byteLength = bitLength / 8
	print byteLength

	countResult = results.getLastResult()

	if countResult is not None:
		countPos = countResult.getStartBytePos()
		varCount = countResult.getByteView().readUnsignedInt(countPos, 1, ENDIAN_LITTLE)
		if varCount == 0:
			return 0

	print element.getName()
	#varCount =  element.getLength()
	#results.addStructureStart(element.getEnclosingStructure(), bytetPos, 0, &quot;SmallDefaults&quot;, True)
	print &quot;Yuck&quot;
	#for index in range(0, varCount):
	while (bytePos - startPos) &lt; byteLength:
		varValue = byteView.readUnsignedInt(bytePos, 1, ENDIAN_LITTLE)
		print &quot;Var Val: &quot; + str(varValue)
		value = NumberValue()
		value.setUnsigned(varValue)
		processedBytes += 1
		bytePos += 1
		varElement = Element(NUMBER_ELEMENT, &quot;Var&quot;, True)
		results.addElement(varElement, processedBytes, iteration, value)
	#results.addStructureEnd(bytePos)
	# return number of processed bytes
	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# write an integer back to file
	# byteArray.writeUnsignedIntBits(highWord, bitPos, bitLength, ENDIAN_LITTLE)
</source>
            </script>
            <script name="BigDefaults" type="DataType" id="331">
                <source language="Python"># custom data type script

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	# how many bytes were processed?
	processedBytes = 0
	iteration = 0
	# we are only working with bytes
    startPos = bytePos = bitPos / 8

	# Find the number of vars to read.
	result = results.getResultByName(&quot;BigVars&quot;)
	if result is not None:
		defaultResult = results.addStructureStart(element.getEnclosingStructure(), startPos, 0, &quot;Big Defaults&quot;, True)
		varCountPos = result.getStartBytePos()
		varCount = result.getByteView().readUnsignedInt(varCountPos, 1, ENDIAN_LITTLE)
		
		index = 0
		for index in range(0, varCount - 1):
			value = NumberValue()
			value.setUnsigned(byteView.readUnsignedInt(bytePos, 2, ENDIAN_LITTLE)
			processedBytes += 2
			bytePos += 2
			results.addElement(element, processedBytes, iteration, value)

	results.addStructureEnd(bytePos)

	# return number of processed bytes
	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# write an integer back to file
	# byteArray.writeUnsignedIntBits(highWord, bitPos, bitLength, ENDIAN_LITTLE)</source>
            </script>
            <script name="Operation" type="DataType" id="322">
                <source language="Python"># custom data type script

def parseByteRange(element, byteView, bitPos, bitLength, results):
    # this method parses data starting at bitPos, bitLength bits are remaining
    &quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

    # how many bytes were processed?
    processedBytes = 0
    iteration = 0
    bytePos = bitPos / 8

    opResult = results.addStructureStart(element.getEnclosingStructure(), bytePosPos, 0, &quot;Operations&quot;, True)
    processedBytes += parseOperation(bytePos, element, byteView, results, iteration)
    opResult = results.addStructureEnd(bytePos)

    # return number of processed bytes
    return processedBytes

def parseOperation(bytePos, element, byteView, results, iteration):
    offset = bytePos
    processed = processedBytes

    # The recursive parser
    operandTypes = byteView.readByte(bytePos)
    offset +=1
    operationType = byteView.readByte(bytePos)
    offset +=1
    leftType = operandTypes &amp; 0xF0
    rightType = operandTypes &amp; 0x0F

    opName = &quot;&quot;

    if operationType == 0x01:
        opName = &quot;Equal&quot;
    elif operationType == 0x02:
        opName = &quot;Not Equal&quot;
    elif operationType == 0x03:
        opName = &quot;Greater&quot;
    elif operationType == 0x04:
        opName = &quot;Less&quot;
    elif operationType == 0x05:
        opName = &quot;Greater Equal&quot;
    elif operationType == 0x06:
        opName = &quot;Less Equal&quot;
    elif operationType == 0x07:
        opName = &quot;AND&quot;
    elif operationType == 0x08:
        opName = &quot;OR&quot;
    elif operationType == 0x09:
        opName = &quot;XOR&quot;
    elif operationType == 0x0A:
        opName = &quot;NAND&quot;
    elif operationType == 0x0B:
        opName = &quot;NOR&quot;
    elif operationType == 0x0C:
        opName = &quot;XNOR&quot;
    elif operationType == 0x0D:
        opName = &quot;Choice Visible&quot;
    elif operationType == 0x0E:
        opName = &quot;Mod&quot;
    elif operationType == 0x0F:
        opName = &quot;Set&quot;
    elif operationType == 0x10:
        opName = &quot;Plus&quot;
    elif operationType == 0x11:
        opName = &quot;Minus&quot;
    elif operationType == 0x12:
        opName = &quot;Multiply&quot;
    elif operationType == 0x13:
        opName = &quot;Divide&quot;
    elif operationType == 0x14:
        opName = &quot;Rand&quot;
    elif operationType == 0x15:
        opName = &quot;DiceRoll&quot;
    elif operationType == 0x06:
        opName = &quot;If&quot;

    opResult = results.addStructureStart(element.getEnclosingStructure(), offset, 0, opName, True)

    if leftType == 0x01: # Raw Value
        value = NumberValue()
        value.setSigned(byteView.readSignedInt(bytePos, 2, ENDIAN_LITTLE))
        value.setName(&quot;Raw&quot;)
        results.addElement(element, offset, iteration, value)
        offset += 2
    elif leftType == 0x02: # Variable
        value = NumberValue()
        value.setSigned(byteView.readSignedInt(bytePos, 2, ENDIAN_LITTLE))
        value.setName(&quot;Var Index&quot;)
        results.addElement(element, offset, iteration, value)
        offset += 2
    elif leftType == 0x03: # Operation
        offset += parseOperation(offset, element, byteView, results, iteration)

    if rightType == 0x01: # Raw Value
        value = NumberValue()
        value.setSigned(byteView.readSignedInt(bytePos, 2, ENDIAN_LITTLE))
        value.setName(&quot;Raw&quot;)
        results.addElement(element, offset, iteration, value)
        offset += 2
    elif rightType == 0x02: # Variable
        value = NumberValue()
        value.setSigned(byteView.readSignedInt(bytePos, 2, ENDIAN_LITTLE))
        value.setName(&quot;Var Index&quot;)
        results.addElement(element, offset, iteration, value)
        offset += 2
    elif rightType == 0x03: # Operation
        offset += parseOperation(offset, element, byteView, results, iteration)

    opResult = results.addStructureEnd(offset)
    return offset - bytePos


def fillByteRange(value, byteArray, bitPos, bitLength):
    # this method translates edited values back to the file
    &quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

    # write an integer back to file
    # byteArray.writeUnsignedIntBits(highWord, bitPos, bitLength, ENDIAN_LITTLE)</source>
            </script>
        </scripts>
        <structure name="Story" id="322" encoding="ISO_8859-1:1987" endian="little" signed="no">
            <structure name="StoryHeader" id="323">
                <binary name="StartHeader" mustmatch="yes" id="324" fillcolor="BA1A00" length="1">
                    <description>Start of Heading byte.</description>
                    <fixedvalues>
                        <fixedvalue name="SOH" value="01"/>
                    </fixedvalues>
                </binary>
                <structure name="BinaryVersion" id="325" length="3">
                    <number name="Major" id="326" fillcolor="E7D3FF" type="integer" length="1"/>
                    <number name="Minor" id="327" fillcolor="E6D2FF" type="integer" length="1"/>
                    <number name="Revision" id="328" type="integer" length="1"/>
                </structure>
                <number name="oldUUID" id="330" disabled="yes" type="integer" length="16"/>
                <binary name="UUID" id="331" length="16"/>
                <structure name="Flags" id="332" length="4">
                    <number name="Features Used" id="333" fillcolor="BEFBA9" type="integer" length="8" lengthunit="bit" display="binary">
                        <mask name="Scripting" value="0x80">
                            <fixedvalue name="Yes" value="0x80"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Variables" value="0x40">
                            <fixedvalue name="Yes" value="0x40"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Images" value="0x20">
                            <fixedvalue name="Yes" value="0x20"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="Toggles" id="334" fillcolor="BFFBA9" type="integer" length="8" lengthunit="bit" display="binary">
                        <mask name="Continue" value="0x80">
                            <fixedvalue name="Yes" value="0x80"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Multiplayer" value="0x40">
                            <fixedvalue name="Yes" value="0x40"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Hide Used" value="0x20">
                            <fixedvalue name="Yes" value="0x20"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="Flags3" id="335" fillcolor="BDFBA7" type="integer" length="8" lengthunit="bit" display="binary"/>
                    <number name="Flags4" id="336" fillcolor="C1FBA9" type="integer" length="8" lengthunit="bit" display="binary"/>
                </structure>
                <number name="StorySize" id="338" fillcolor="B764FF" type="integer" length="4">
                    <description>The story size in bytes.</description>
                </number>
                <structure name="StoryVersion" id="339" length="3" fillcolor="F9DCFF">
                    <number name="Major" id="340" fillcolor="E0C6FF" type="integer" length="1"/>
                    <number name="Minor" id="341" fillcolor="E4D1FF" type="integer" length="1"/>
                    <number name="Revision" id="342" fillcolor="DCCFFF" type="integer" length="1"/>
                </structure>
                <number name="Rsvd" id="344" type="integer" length="1"/>
                <string name="LanguageCode" id="345" fillcolor="FFB85D" type="fixed-length" length="4"/>
                <string name="Title" id="346" fillcolor="FFBA68" type="fixed-length" length="64"/>
                <string name="Subtitle" id="347" fillcolor="FFB24F" type="fixed-length" length="32"/>
                <string name="Author" id="348" fillcolor="FFBA64" type="fixed-length" length="48"/>
                <string name="Credits" id="349" fillcolor="FFB961" type="fixed-length" length="80"/>
                <string name="Contact" id="350" fillcolor="FFB962" type="fixed-length" length="128"/>
                <number name="PublishDate" id="351" type="integer" length="4" endian="little"/>
                <number name="VariableCount" id="352" fillcolor="FFF67D" type="integer" length="2" minval="0">
                    <description>The number of big variables to allocate space for (16 bit).</description>
                </number>
            </structure>
            <structure name="StoryBody" id="354">
                <number name="PassageCount" id="355" type="integer" length="2"/>
                <number name="PassageOffset" id="356" repeatmin="PassageCount" repeatmax="PassageCount" type="integer" length="4"/>
                <structure name="Passage" id="357" length="0" repeat="id:355" repeatmin="PassageCount" repeatmax="PassageCount">
                    <number name="Attributes" id="358" type="integer" length="8" lengthunit="bit" display="binary">
                        <mask name="Append" value="0x80">
                            <fixedvalue name="Yes" value="0x80"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="UpdateCount" id="359" fillcolor="9BFB97" type="integer" length="1" minval="0" maxval="8"/>
                    <custom name="UpdateOperation" id="399" repeatmin="UpdateCount" repeatmax="UpdateCount" script="id:322"/>
                    <structure name="ValueUpdate" id="361" length="5" disabled="yes" repeatmin="UpdateCount" repeatmax="UpdateCount" encoding="ISO_8859-1:1987" endian="little" signed="no">
                        <number name="VariableTypes" id="362" type="integer" length="8" lengthunit="bit" display="binary">
                            <mask name="ValueOneType" value="0xC0">
                                <fixedvalue name="raw" value="0x0"/>
                                <fixedvalue name="bool" value="0x40"/>
                                <fixedvalue name="uint 8" value="0x80"/>
                                <fixedvalue name="uint 16" value="0xC0"/>
                            </mask>
                            <mask name="ValueTwoType" value="0x30">
                                <fixedvalue name="raw" value="0x0"/>
                                <fixedvalue name="bool" value="0x10"/>
                                <fixedvalue name="uint 8" value="0x20"/>
                                <fixedvalue name="uint 16" value="0x30"/>
                            </mask>
                            <mask name="Operator" value="0xF">
                                <fixedvalue name="Equals" value="0x0"/>
                                <fixedvalue name="Plus" value="0x1"/>
                                <fixedvalue name="Minus" value="0x2"/>
                                <fixedvalue name="Multiply" value="0x3"/>
                                <fixedvalue name="Divide" value="0x4"/>
                                <fixedvalue name="Modulus" value="0x5"/>
                            </mask>
                        </number>
                        <number name="Value/Index1" id="363" type="integer" length="2"/>
                        <number name="Value/Index2" id="364" type="integer" length="2"/>
                    </structure>
                    <number name="BodyLength" id="366" type="integer" length="2" minval="0"/>
                    <custom name="Body" id="367" length="BodyLength" script="id:64"/>
                    <number name="ChoiceCount" id="368" fillcolor="FFEC90" type="integer" length="1" minval="0" maxval="10"/>
                    <structure name="Choice" id="369" repeatmin="ChoiceCount" repeatmax="ChoiceCount">
                        <number name="Attributes" id="370" type="integer" length="8" lengthunit="bit" display="binary"/>
                        <number name="ConditionCount" id="371" type="integer" length="1" minval="0" maxval="255"/>
                        <custom name="ConditionOperation" id="397" repeatmin="ConditionCount" repeatmax="ConditionCount" script="id:322"/>
                        <structure name="DisplayCondition" id="372" length="5" disabled="yes" repeatmin="ConditionCount" repeatmax="ConditionCount">
                            <number name="ValueTypes" id="373" type="integer" length="8" lengthunit="bit" display="binary">
                                <mask name="ValueOneType" value="0xC0">
                                    <fixedvalue name="raw" value="0x0"/>
                                    <fixedvalue name="bool" value="0x40"/>
                                    <fixedvalue name="uint 8" value="0x80"/>
                                    <fixedvalue name="uint 16" value="0xC0"/>
                                </mask>
                                <mask name="ValueTwoType" value="0x30">
                                    <fixedvalue name="hard value" value="0x0"/>
                                    <fixedvalue name="bool" value="0x10"/>
                                    <fixedvalue name="uint 8" value="0x20"/>
                                    <fixedvalue name="uint 16" value="0x30"/>
                                </mask>
                                <mask name="Operator" value="0xF">
                                    <fixedvalue name="Equal To" value="0x0"/>
                                    <fixedvalue name="Greater Than" value="0x1"/>
                                    <fixedvalue name="Less Than" value="0x2"/>
                                    <fixedvalue name="Equal or Greater" value="0x3"/>
                                    <fixedvalue name="Equal or Less" value="0x4"/>
                                    <fixedvalue name="Modulus" value="0x5"/>
                                </mask>
                            </number>
                            <number name="Value/Index1" id="374" type="integer" length="2"/>
                            <number name="Value/Index2" id="375" type="integer" length="2"/>
                        </structure>
                        <number name="UpdateLength" id="377" type="integer" length="2"/>
                        <number name="UpdateCount" id="378" type="integer" length="1"/>
                        <custom name="UpdateOperation" id="396" repeatmin="UpdateCount" repeatmax="UpdateCount" script="id:322"/>
                        <structure name="ValueUpdate" id="379" length="5" disabled="yes" repeatmin="UpdateCount" repeatmax="UpdateCount" encoding="ISO_8859-1:1987" endian="little" signed="no">
                            <number name="VariableTypes" id="380" type="integer" length="8" lengthunit="bit" display="binary">
                                <mask name="ValueOneType" value="0xC0">
                                    <fixedvalue name="raw" value="0x0"/>
                                    <fixedvalue name="bool" value="0x40"/>
                                    <fixedvalue name="uint 8" value="0x80"/>
                                    <fixedvalue name="uint 16" value="0xC0"/>
                                </mask>
                                <mask name="ValueTwoType" value="0x30">
                                    <fixedvalue name="raw" value="0x0"/>
                                    <fixedvalue name="bool" value="0x10"/>
                                    <fixedvalue name="uint 8" value="0x20"/>
                                    <fixedvalue name="uint 16" value="0x30"/>
                                </mask>
                                <mask name="Operator" value="0xF">
                                    <fixedvalue name="Equals" value="0x0"/>
                                    <fixedvalue name="Plus" value="0x1"/>
                                    <fixedvalue name="Minus" value="0x2"/>
                                    <fixedvalue name="Multiply" value="0x3"/>
                                    <fixedvalue name="Divide" value="0x4"/>
                                    <fixedvalue name="Modulus" value="0x5"/>
                                </mask>
                            </number>
                            <number name="Value/Index1" id="381" type="integer" length="2"/>
                            <number name="Value/Index2" id="382" type="integer" length="2"/>
                        </structure>
                        <number name="ChoiceLength" id="384" type="integer" length="2"/>
                        <custom name="ChoiceBody" id="385" repeatmin="0" length="ChoiceLength" script="id:64"/>
                        <number name="PassageIndex" id="386" type="integer" length="2" minval="0"/>
                    </structure>
                    <custom name="Ending" id="388" script="id:92"/>
                    <binary name="EndBody" mustmatch="yes" id="389" length="1">
                        <fixedvalues>
                            <fixedvalue name="ETX" value="03"/>
                        </fixedvalues>
                    </binary>
                </structure>
            </structure>
            <structure name="Dictionary" id="392" disabled="yes">
                <string name="Word" id="393" repeatmax="-1" type="zero-terminated"/>
            </structure>
        </structure>
    </grammar>
</ufwb>
