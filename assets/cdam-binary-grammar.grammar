<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.7">
    <grammar name="Choosatron Story Binary" start="id:4" author="Jerry Belich" email="jerry@choosatron.com" fileextension="cdam" uti="com.choosatron">
        <description>Grammar for the Choosatron Deluxe Adventure Matrix binary story file.</description>
        <scripts>
            <script name="Passage" type="Grammar" id="66">
                <source language="Python">def init():
	print &quot;init&quot;

def processGrammar(grammar):
	print &quot;grammar&quot;

def terminate():
	print &quot;terminate&quot;
</source>
            </script>
            <script name="PassageBody" type="DataType" id="64">
                <source language="Python"># custom data type script

def parseByteRange(element, byteView, bitPos, bitLength, results):
    # this method parses data starting at bitPos, bitLength bits are remaining
    &quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

    textStr = &quot;&quot;
    # how many bytes were processed?
    processedBytes = 0
    iteration = 0
    # we are only working with bytes
    startPos = bytePos = bitPos / 8
    
    processedBytes = 0
    byteLength = bitLength / 8

    results.addStructureStartAtPosition(element.getEnclosingStructure(), startPos, 0, &quot;PassageBody&quot;)

    while (bytePos - startPos) &lt; byteLength:
        byteRead = byteView.readByte(bytePos)
        print(&quot;Byte: &quot; + chr(byteRead))
        bytePos += 1
        processedBytes += 1
        print(str(bytePos - startPos))
        if byteRead == 0x1A or byteRead == 0x05 or (bytePos - startPos) == byteLength:
            print(&quot;End of Text&quot;)
            if len(textStr) &gt; 0:
                if (bytePos - startPos) == byteLength:
                    textStr += chr(byteRead)
                    processedBytes += 1
                textValue = StringValue()
                textValue.setString(textStr)
                print(textStr)
                textStr = &quot;&quot;
                textElement = Element(1, &quot;Text&quot;, True)
                results.addElement(textElement, processedBytes - 1, iteration, textValue)
                # The currently read byte is part of a SUB or CMD
                processedBytes = 1

        # SUB or Substitute byte means a word lookup, 3 byte address
        if byteRead == 0x1A:
            print(&quot;Starting SUB&quot;)
            subByteElement = Element(1, &quot;Start Substitute&quot;, True)
            subValue = StringValue()
            subValue.setString(&quot;SUB: 1A&quot;)
            results.addElement(subByteElement, 1, iteration, subValue)
            address = byteView.readUnsignedInt(bytePos, 3, ENDIAN_BIG)
            addressVal = NumberValue()
            addressVal.setName(&quot;Lookup Address&quot;)
            addressVal.setUnsigned(address)
            bytePos += 3
            subElement = Element(2, &quot;Substitution&quot;, True)
            results.addElement(subElement, 3, iteration, addressVal)
            processedBytes = 0
        elif byteRead == 0x05:
            print(&quot;Starting CMD&quot;)
            cmdStartElement = Element(1, &quot;Start Command&quot;, True)
            cmdStartValue = StringValue()
            cmdStartValue.setString(&quot;ENQ: 05&quot;)
            results.addElement(cmdStartElement, 1, iteration, cmdStartValue)
            commandType = byteView.readByte(bytePos)
            bytePos += 1
            cmdTypeElement = Element(2, &quot;Command Type&quot;, True)
            cmdTypeValue = NumberValue()
            cmdTypeValue.setUnsigned(commandType)
            results.addElement(cmdTypeElement, 1, iteration, cmdTypeValue)
            cmdBody = &quot;&quot;
            processedBytes = 0
            while byteRead != 0x06:
                byteRead = byteView.readByte(bytePos)
                if byteRead != 0x06:
                    bytePos += 1
                    processedBytes += 1
                    cmdBody += chr(byteRead)
            if len(cmdBody) &gt; 0:
                commandVal = StringValue()
                commandVal.setName(&quot;Command Body&quot;)
                commandVal.setString(cmdBody)
                cmdElement = Element(1, &quot;Command&quot;, True)
                results.addElement(cmdElement, processedBytes, iteration, commandVal)
            bytePos += 1
            cmdEndElement = Element(1, &quot;End Command&quot;, True)
            cmdEndValue = StringValue()
            cmdEndValue.setString(&quot;ACK: 06&quot;)
            results.addElement(cmdEndElement, 1, iteration, cmdEndValue)
            processedBytes = 0
        else:
            textStr += chr(byteRead)
            print(textStr)

    return bytePos - startPos


def fillByteRange(value, byteArray, bitPos, bitLength):
    # this method translates edited values back to the file
    &quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;</source>
            </script>
        </scripts>
        <structure name="Choosatron Story" id="4" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structure name="BinaryVersion" id="5">
                <number name="Major" id="6" fillcolor="E7D3FF" type="integer" length="1"/>
                <number name="Minor" id="7" fillcolor="E6D2FF" type="integer" length="1"/>
            </structure>
            <structure name="StoryHeader" id="9">
                <binary name="StartHeader" mustmatch="yes" id="10" fillcolor="BA1A00" length="1">
                    <description>Start of Heading byte.</description>
                    <fixedvalues>
                        <fixedvalue name="SOH" value="01"/>
                    </fixedvalues>
                </binary>
                <structure name="Flags" id="181" length="4">
                    <number name="Features Used" id="180" fillcolor="BEFBA9" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000" maxval="11111111">
                        <mask name="Scripting" value="0x80">
                            <fixedvalue name="Yes" value="0x80"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Variables" value="0x40">
                            <fixedvalue name="Yes" value="0x40"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Images" value="0x20">
                            <fixedvalue name="Yes" value="0x20"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="Toggles" id="11" fillcolor="BFFBA9" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000">
                        <mask name="Continue" value="0x80">
                            <fixedvalue name="Yes" value="0x80"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Multiplayer" value="0x40">
                            <fixedvalue name="Yes" value="0x40"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Hide Used" value="0x20">
                            <fixedvalue name="Yes" value="0x20"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="Flags3" id="185" fillcolor="BDFBA7" type="integer" length="8" lengthunit="bit" minval="0" maxval="11111111"/>
                    <number name="Flags4" id="186" fillcolor="C1FBA9" type="integer" length="8" lengthunit="bit" minval="0" maxval="11111111"/>
                </structure>
                <structure name="Variables" id="12" length="2">
                    <number name="Small" id="13" fillcolor="FFEFA6" type="integer" length="1" minval="0" maxval="255">
                        <description>The number of small variables to allocate space for (8 bit).</description>
                    </number>
                    <number name="Big" id="14" fillcolor="FFF67D" type="integer" length="1" minval="0" maxval="255">
                        <description>The number of big variables to allocate space for (16 bit).</description>
                    </number>
                </structure>
                <number name="StorySize" id="16" fillcolor="B764FF" type="integer" length="4" minval="1" maxval="1572864">
                    <description>The story size in bytes.</description>
                </number>
                <structure name="StoryVersion" id="17" length="3" fillcolor="F9DCFF">
                    <number name="Major" id="18" fillcolor="E0C6FF" type="integer" length="1"/>
                    <number name="Minor" id="19" fillcolor="E4D1FF" type="integer" length="1"/>
                    <number name="Revision" id="20" fillcolor="DCCFFF" type="integer" length="1"/>
                </structure>
                <string name="LanguageCode" id="22" fillcolor="FFB85D" type="fixed-length" length="3"/>
                <string name="Title" id="23" fillcolor="FFBA68" type="pascal"/>
                <string name="Subtitle" id="24" fillcolor="FFB24F" type="pascal"/>
                <string name="Author" id="25" fillcolor="FFBA64" type="pascal"/>
                <string name="Credits" id="26" fillcolor="FFB961" type="pascal"/>
                <string name="Contact" id="27" fillcolor="FFB962" type="pascal"/>
                <string name="Website" id="28" fillcolor="FFB957" type="pascal"/>
                <structure name="ReleaseDate" id="29" length="8">
                    <string name="Year" id="30" fillcolor="83D4FF" type="fixed-length" length="4"/>
                    <string name="Month" id="31" fillcolor="7ADBFF" type="fixed-length" length="2"/>
                    <string name="Day" id="32" fillcolor="88DFFF" type="fixed-length" length="2"/>
                </structure>
            </structure>
            <structure name="StoryBody" id="35">
                <binary name="StartBody" mustmatch="yes" id="36" fillcolor="BE1901" length="1">
                    <description>Start of Text byte.</description>
                    <fixedvalues>
                        <fixedvalue name="STX" value="02"/>
                    </fixedvalues>
                </binary>
                <structure name="Passage" id="37" length="0">
                    <number name="UpdateCount" id="38" fillcolor="9BFB97" type="integer" length="1" minval="0" maxval="8"/>
                    <structure name="ValueUpdate" id="39" length="4" repeat="id:38" repeatmin="0" repeatmax="8" encoding="ISO_8859-1:1987" endian="big" signed="no">
                        <number name="VariableTypes" mustmatch="yes" id="40" type="integer" length="1" minval="1" maxval="3">
                            <fixedvalues>
                                <fixedvalue name="bool" value="1"/>
                                <fixedvalue name="uint 8" value="2"/>
                                <fixedvalue name="uint 16" value="3"/>
                            </fixedvalues>
                        </number>
                        <number name="ValueOne" id="42" type="integer" length="1" minval="0" maxval="255"/>
                        <string name="Operator" mustmatch="yes" id="41" type="fixed-length" length="1">
                            <fixedvalues>
                                <fixedvalue name="Plus" value="+"/>
                                <fixedvalue name="Minus" value="-"/>
                                <fixedvalue name="Divide" value="/"/>
                                <fixedvalue name="Multiply" value="*"/>
                                <fixedvalue name="Equals" value="="/>
                            </fixedvalues>
                        </string>
                        <number name="ValueTwo" id="43" type="integer" length="1" minval="0" maxval="255"/>
                    </structure>
                    <number name="Length" id="45" type="integer" length="2" minval="0"/>
                    <custom name="PassageBody" id="46" length="Length" script="id:64"/>
                    <number name="ChoiceCount" id="47" fillcolor="FFEC90" type="integer" length="1" minval="0" maxval="10"/>
                    <number name="ConditionCount" id="189" type="integer" length="1" minval="0" maxval="8"/>
                    <structure name="DisplayCondition" id="187" repeatmin="0"/>
                    <structure name="Choice" id="48" repeatmin="0" repeatmax="10"/>
                </structure>
            </structure>
        </structure>
    </grammar>
</ufwb>
