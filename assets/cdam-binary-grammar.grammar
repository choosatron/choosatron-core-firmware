<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.7">
    <grammar name="Choosatron Story Binary-WORKING" start="id:4" author="Jerry Belich" email="jerry@choosatron.com" fileextension="cdam" uti="com.choosatron" complete="yes">
        <description>Grammar for the Choosatron Deluxe Adventure Matrix binary story file.</description>
        <scripts>
            <script name="TextBody" type="DataType" id="64">
                <source language="Python"># Text Body - Used for passage body text and choice text.

def parseByteRange(element, byteView, bitPos, bitLength, results):
    # this method parses data starting at bitPos, bitLength bits are remaining
    &quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

    textStr = &quot;&quot;
    # how many bytes were processed?
    processedBytes = 0
    iteration = 0
    # we are only working with bytes
    startPos = bytePos = bitPos / 8
    
    processedBytes = 0
    byteLength = bitLength / 8

    result = results.addStructureStart(element.getEnclosingStructure(), 0, &quot;TextBody&quot;)
    #structure = result.getStructure()    
    #structure.setLength('5', LENGTH_UNIT_BYTES)

    while (bytePos - startPos) &lt; byteLength:
        byteRead = byteView.readByte(bytePos)
        bytePos += 1
        processedBytes += 1
        if byteRead == 0x1A or byteRead == 0x05 or (bytePos - startPos) == byteLength:
            print(&quot;End of Text&quot;)
            if len(textStr) &gt; 0:
                if (bytePos - startPos) == byteLength:
                    textStr += chr(byteRead)
                    processedBytes += 1
                textValue = StringValue()
                textValue.setString(textStr)
                textElement = StringElement(1, &quot;Text&quot;, True)
                #textElement.setLength(LENGTH_UNIT_BYTES, len(textStr))
                textStr = &quot;&quot;
                print(&quot;Text Len: &quot; + str(textElement.getLength()))
                results.addElement(textElement, processedBytes - 1, iteration, textValue)
                # The currently read byte is part of a SUB or CMD
                processedBytes = 1

        # SUB or Substitute byte means a word lookup, 3 byte address
        if byteRead == 0x1A:
            print(&quot;Starting SUB&quot;)
            subByteElement = Element(1, &quot;Start Substitute&quot;, True)
            subValue = StringValue()
            subValue.setString(&quot;SUB: 1A&quot;)
            results.addElement(subByteElement, 1, iteration, subValue)
            address = byteView.readUnsignedInt(bytePos, 3, ENDIAN_BIG)
            addressVal = NumberValue()
            addressVal.setName(&quot;Lookup Address&quot;)
            addressVal.setUnsigned(address)
            bytePos += 3
            subElement = Element(2, &quot;Substitution&quot;, True)
            results.addElement(subElement, 3, iteration, addressVal)
            processedBytes = 0
        elif byteRead == 0x05:
            print(&quot;Starting CMD&quot;)
            cmdStartElement = StringElement(ELEMENT_STRING, &quot;Start Command&quot;, True)
            cmdStartValue = StringValue()
            cmdStartValue.setString(&quot;ENQ: 05&quot;)
            results.addElement(cmdStartElement, 1, iteration, cmdStartValue)
            commandType = byteView.readByte(bytePos)
            bytePos += 1
            cmdTypeElement = NumberElement(ELEMENT_NUMBER, &quot;Command Type&quot;, True)
            cmdTypeValue = NumberValue()
            cmdTypeValue.setUnsigned(commandType)
            results.addElement(cmdTypeElement, 1, iteration, cmdTypeValue)
            cmdBody = &quot;&quot;
            processedBytes = 0
            while byteRead != 0x06:
                byteRead = byteView.readByte(bytePos)
                if byteRead != 0x06:
                    bytePos += 1
                    processedBytes += 1
                    cmdBody += chr(byteRead)
            if len(cmdBody) &gt; 0:
                commandVal = StringValue()
                commandVal.setName(&quot;Command Body&quot;)
                commandVal.setString(cmdBody)
                cmdElement = StringElement(ELEMENT_STRING, &quot;Command&quot;, True)
                results.addElement(cmdElement, processedBytes, iteration, commandVal)
            bytePos += 1
            cmdEndElement = Element(1, &quot;End Command&quot;, True)
            cmdEndValue = StringValue()
            cmdEndValue.setString(&quot;ACK: 06&quot;)
            results.addElement(cmdEndElement, 1, iteration, cmdEndValue)
            processedBytes = 0
        else:
            textStr += chr(byteRead)

    results.addStructureEnd(bytePos - startPos)
    print(str(bytePos - startPos))
    return bytePos - startPos


def fillByteRange(value, byteArray, bitPos, bitLength):
    # this method translates edited values back to the file
    &quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;</source>
            </script>
        </scripts>
        <structure name="Story" id="4" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structure name="StoryHeader" id="5">
                <binary name="StartHeader" mustmatch="yes" id="6" fillcolor="BA1A00" length="1">
                    <description>Start of Heading byte.</description>
                    <fixedvalues>
                        <fixedvalue name="SOH" value="01"/>
                    </fixedvalues>
                </binary>
                <structure name="BinaryVersion" id="7" length="2">
                    <number name="Major" id="8" fillcolor="E7D3FF" type="integer" length="1"/>
                    <number name="Minor" id="9" fillcolor="E6D2FF" type="integer" length="1"/>
                </structure>
                <structure name="Flags" id="11" length="4">
                    <number name="Features Used" id="12" fillcolor="BEFBA9" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000" maxval="0111111111111111111111111111111111111111111111111111111111111111">
                        <mask name="Scripting" value="0x80">
                            <fixedvalue name="Yes" value="0x80"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Variables" value="0x40">
                            <fixedvalue name="Yes" value="0x40"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Images" value="0x20">
                            <fixedvalue name="Yes" value="0x20"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="Toggles" id="13" fillcolor="BFFBA9" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000">
                        <mask name="Continue" value="0x80">
                            <fixedvalue name="Yes" value="0x80"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Multiplayer" value="0x40">
                            <fixedvalue name="Yes" value="0x40"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                        <mask name="Hide Used" value="0x20">
                            <fixedvalue name="Yes" value="0x20"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="Flags3" id="14" fillcolor="BDFBA7" type="integer" length="8" lengthunit="bit" minval="0" maxval="11111111"/>
                    <number name="Flags4" id="15" fillcolor="C1FBA9" type="integer" length="8" lengthunit="bit" minval="0" maxval="11111111"/>
                </structure>
                <structure name="Variables" id="17" length="3">
                    <number name="Bits" id="18" fillcolor="FFF3A6" type="integer" length="1" minval="0" maxval="255"/>
                    <number name="Small" id="19" fillcolor="FFEFA6" type="integer" length="1" minval="0" maxval="255">
                        <description>The number of small variables to allocate space for (8 bit).</description>
                    </number>
                    <number name="Big" id="20" fillcolor="FFF67D" type="integer" length="1" minval="0" maxval="255">
                        <description>The number of big variables to allocate space for (16 bit).</description>
                    </number>
                </structure>
                <number name="StorySize" id="22" fillcolor="B764FF" type="integer" length="4" minval="1" maxval="1572864">
                    <description>The story size in bytes.</description>
                </number>
                <structure name="StoryVersion" id="23" length="3" fillcolor="F9DCFF">
                    <number name="Major" id="24" fillcolor="E0C6FF" type="integer" length="1"/>
                    <number name="Minor" id="25" fillcolor="E4D1FF" type="integer" length="1"/>
                    <number name="Revision" id="26" fillcolor="DCCFFF" type="integer" length="1"/>
                </structure>
                <string name="LanguageCode" id="28" fillcolor="FFB85D" type="fixed-length" length="3"/>
                <string name="Title" id="29" fillcolor="FFBA68" type="pascal"/>
                <string name="Subtitle" id="30" fillcolor="FFB24F" type="pascal"/>
                <string name="Author" id="31" fillcolor="FFBA64" type="pascal"/>
                <string name="Credits" id="32" fillcolor="FFB961" type="pascal"/>
                <string name="Contact" id="33" fillcolor="FFB962" type="pascal"/>
                <string name="Website" id="34" fillcolor="FFB957" type="pascal"/>
                <structure name="ReleaseDate" id="35" length="8">
                    <string name="Year" id="36" fillcolor="83D4FF" type="fixed-length" length="4"/>
                    <string name="Month" id="37" fillcolor="7ADBFF" type="fixed-length" length="2"/>
                    <string name="Day" id="38" fillcolor="88DFFF" type="fixed-length" length="2"/>
                </structure>
            </structure>
            <structure name="StoryBody" id="41">
                <binary name="StartBody" mustmatch="yes" id="42" fillcolor="BE1901" length="1">
                    <description>Start of Text byte.</description>
                    <fixedvalues>
                        <fixedvalue name="STX" value="02"/>
                    </fixedvalues>
                </binary>
                <number name="PassageCount" id="43" type="integer" length="2"/>
                <structure name="Passage" id="44" length="0" repeatmin="PassageCount" repeatmax="PassageCount">
                    <number name="Attributes" id="45" type="integer" length="8" lengthunit="bit" display="binary">
                        <mask name="Quality" value="0xE0">
                            <fixedvalue name="Terrible" value="0x20"/>
                            <fixedvalue name="Bad" value="0x40"/>
                            <fixedvalue name="Neutral" value="0x60"/>
                            <fixedvalue name="Good" value="0x80"/>
                            <fixedvalue name="Great" value="0xA0"/>
                            <fixedvalue name="Undefined" value="0x0"/>
                        </mask>
                        <mask name="Append" value="0x10">
                            <fixedvalue name="Yes" value="0x10"/>
                            <fixedvalue name="No" value="0x0"/>
                        </mask>
                    </number>
                    <number name="UpdateCount" id="46" fillcolor="9BFB97" type="integer" length="1" minval="0" maxval="8"/>
                    <scriptelement name="MapValueUpdates" id="47">
                        <script name="unnamed" type="Generic">
                            <source language="Lua">-- get collection with results so far
results = currentMapper:getCurrentResults()
-- get latest added result
lastResult = results:getLastResult()
-- access the parsed value
updateCount = lastResult:getValue():getUnsignedNumber()

bytes = 0

for i = 1, updateCount do
	-- get currently processed grammar. This may change if another grammar is referenced
	currentGrammar = currentMapper:getCurrentGrammar()
	-- get the structure we want to apply
	structure = currentGrammar:getStructureByName(&quot;ValueUpdate&quot;)
	-- map structure at current parsing position and add number of parsed bytes to enclosing structure
	bytes = bytes + currentMapper:mapStructure(structure)
end

return bytes
</source>
                        </script>
                    </scriptelement>
                    <number name="PassageLength" id="48" type="integer" length="2" minval="0"/>
                    <custom name="PassageBody" id="49" length="PassageLength" script="id:64"/>
                    <number name="ChoiceCount" id="50" fillcolor="FFEC90" type="integer" length="1" minval="0" maxval="10"/>
                    <structure name="Choice" id="51" repeatmin="ChoiceCount" repeatmax="ChoiceCount">
                        <number name="Attributes" id="52" type="integer" length="8" lengthunit="bit" display="binary">
                            <mask name="Append" value="0x80">
                                <fixedvalue name="Yes" value="0x80"/>
                                <fixedvalue name="No" value="0x0"/>
                            </mask>
                        </number>
                        <number name="ConditionCount" id="53" type="integer" length="1" minval="0" maxval="8"/>
                        <structure name="DisplayCondition" id="54" length="5" repeatmin="ConditionCount" repeatmax="ConditionCount">
                            <number name="ValueTypes" id="55" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000" maxval="0111111111111111111111111111111111111111111111111111111111111111">
                                <mask name="ValueOneType" value="0xC0">
                                    <fixedvalue name="hard value" value="0x0"/>
                                    <fixedvalue name="bool" value="0x40"/>
                                    <fixedvalue name="uint 8" value="0x80"/>
                                    <fixedvalue name="uint 16" value="0xC0"/>
                                </mask>
                                <mask name="ValueTwoType" value="0x30">
                                    <fixedvalue name="hard value" value="0x0"/>
                                    <fixedvalue name="bool" value="0x10"/>
                                    <fixedvalue name="uint 8" value="0x20"/>
                                    <fixedvalue name="uint 16" value="0x30"/>
                                </mask>
                                <mask name="Operator" value="0xF">
                                    <fixedvalue name="Equal To" value="0x0"/>
                                    <fixedvalue name="Greater Than" value="0x1"/>
                                    <fixedvalue name="Less Than" value="0x2"/>
                                    <fixedvalue name="Equal or Greater" value="0x3"/>
                                    <fixedvalue name="Equal or Less" value="0x4"/>
                                    <fixedvalue name="Mod" value="0x5"/>
                                </mask>
                            </number>
                            <number name="ValueOrIndex1" id="56" type="integer" length="2"/>
                            <number name="ValueOrIndex2" id="57" type="integer" length="2"/>
                        </structure>
                        <number name="ChoiceLength" id="59" type="integer" length="2"/>
                        <custom name="ChoiceBody" id="60" length="ChoiceLength" script="id:64"/>
                        <number name="PassageOffset" id="61" type="integer" length="4" minval="0"/>
                        <number name="UpdateCount" id="62" type="integer" length="1" minval="0" maxval="8"/>
                        <scriptelement name="MapValueUpdates" id="63">
                            <script name="unnamed" type="Generic">
                                <source language="Lua">-- get collection with results so far
results = currentMapper:getCurrentResults()
-- get latest added result
lastResult = results:getLastResult()
-- access the parsed value
updateCount = lastResult:getValue():getUnsignedNumber()

bytes = 0

for i = 1, updateCount do
	-- get currently processed grammar. This may change if another grammar is referenced
	currentGrammar = currentMapper:getCurrentGrammar()
	-- get the structure we want to apply
	structure = currentGrammar:getStructureByName(&quot;ValueUpdate&quot;)
	-- map structure at current parsing position and add number of parsed bytes to enclosing structure
	bytes = bytes + currentMapper:mapStructure(structure)
end

return bytes
</source>
                            </script>
                        </scriptelement>
                    </structure>
                </structure>
                <binary name="EndBody" mustmatch="yes" id="66" disabled="yes" length="1">
                    <fixedvalues>
                        <fixedvalue name="ETX" value="03"/>
                    </fixedvalues>
                </binary>
            </structure>
            <structure name="Dictionary" id="68" repeatmax="-1">
                <string name="Word" id="69" repeatmax="-1" type="zero-terminated"/>
            </structure>
        </structure>
        <structure name="ValueUpdate" id="72" length="5" alignment="1" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="VariableTypes" id="73" type="integer" length="8" lengthunit="bit" display="binary" minval="00000000" maxval="0111111111111111111111111111111111111111111111111111111111111111">
                <mask name="ValueOneType" value="0xC0">
                    <fixedvalue name="hard value" value="0x0"/>
                    <fixedvalue name="bool" value="0x40"/>
                    <fixedvalue name="uint 8" value="0x80"/>
                    <fixedvalue name="uint 16" value="0xC0"/>
                </mask>
                <mask name="ValueTwoType" value="0x30">
                    <fixedvalue name="hard value" value="0x0"/>
                    <fixedvalue name="bool" value="0x10"/>
                    <fixedvalue name="uint 8" value="0x20"/>
                    <fixedvalue name="uint 16" value="0x30"/>
                </mask>
                <mask name="Operator" value="0xF">
                    <fixedvalue name="Equals" value="0x0"/>
                    <fixedvalue name="Plus" value="0x1"/>
                    <fixedvalue name="Minus" value="0x2"/>
                    <fixedvalue name="Multiple" value="0x3"/>
                    <fixedvalue name="Divide" value="0x4"/>
                </mask>
            </number>
            <number name="ValueOrIndex1" id="74" type="integer" length="2" minval="0"/>
            <number name="ValueOrIndex2" id="75" type="integer" length="2" minval="0"/>
        </structure>
    </grammar>
</ufwb>
